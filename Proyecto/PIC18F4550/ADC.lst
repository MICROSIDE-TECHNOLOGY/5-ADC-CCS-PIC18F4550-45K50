CCS PCH C Compiler, Version 5.090, 13314               01-dic.-20 09:59

               Filename:   C:\Users\Martin Hdez\Desktop\18F4550\5 ADC\ADC.lst

               ROM used:   196 bytes (1%)
                           Largest free fragment is 24376
               RAM used:   5 (0%) at main() level
                           5 (0%) worst case
               Stack used: 0 locations
               Stack size: 31

*
2000:  GOTO   202A
.................... /*
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V.
.................... FECHA: JUNIO 2019
.................... */
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Implementar una lectura analógica de un potenciómetro y desplegar el valor
.................... en 8 LEDs
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <18F4550.h>                            //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
.................... 
.................... #list
.................... 
.................... #DEVICE ADC=8                                   //Configura el ADC a 8 bits
.................... #use delay(clock=48Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
.................... #build(reset=0x02000,interrupt=0x02008)         //Asigna los vectores de reset e interrupción para la versión con bootloader
.................... #org 0x0000,0x1FFF {}                           //Reserva espacio en memoria para el bootloader
....................  
.................... int ValorPot;                                   //Variable para almacenar el valor leído del ADC
.................... 
.................... void SisInit(void)
.................... 
.................... {
.................... 
.................... setup_oscillator(OSC_8MHZ);                     //Configura oscilador interno
*
2008:  MOVLW  70
200A:  MOVWF  FD3
200C:  MOVF   FD3,W
.................... 
.................... set_tris_b (0X00);                              //Configura todo el puerto B como salidas digitales
200E:  MOVLW  00
2010:  MOVWF  F93
.................... 
.................... setup_adc_ports (AN0);                          //Configura solo el puerto A0 como entrada analógica
2012:  MOVF   FC1,W
2014:  ANDLW  C0
2016:  IORLW  0E
2018:  MOVWF  FC1
.................... 
.................... setup_adc (ADC_CLOCK_DIV_8);                    //Configura oscilador para la conversión
201A:  MOVF   FC0,W
201C:  ANDLW  C0
201E:  IORLW  01
2020:  MOVWF  FC0
2022:  BCF    FC0.7
2024:  BSF    FC2.0
2026:  GOTO   203C (RETURN)
.................... 
.................... }
.................... 
....................  
.................... 
.................... void main()
202A:  CLRF   FF8
202C:  BCF    FD0.7
202E:  MOVF   FC1,W
2030:  ANDLW  C0
2032:  IORLW  0F
2034:  MOVWF  FC1
2036:  MOVLW  07
2038:  MOVWF  FB4
.................... 
.................... {
....................               SisInit () ;
203A:  BRA    2008
.................... 
....................               while (1)
.................... 
....................                     {
.................... 
....................                           set_adc_channel (0);                       //Selecciona el canal 0 para la conversión
203C:  MOVLW  00
203E:  MOVWF  01
2040:  MOVF   FC2,W
2042:  ANDLW  C3
2044:  IORWF  01,W
2046:  MOVWF  FC2
.................... 
....................                          ValorPot = read_adc ();                     //Lee el valor del ADC y lo guarda en la variable
2048:  BSF    FC2.1
204A:  BTFSC  FC2.1
204C:  BRA    204A
204E:  MOVFF  FC4,04
.................... 
....................                           if (ValorPot <= 28)                        //Compara el valor de el ADC con 28
2052:  MOVF   04,W
2054:  SUBLW  1C
2056:  BNC   205E
.................... 
....................                                 {
.................... 
....................                                     output_b (0b00000000);           // Leds activos
2058:  CLRF   F93
205A:  CLRF   F8A
....................                                 }
205C:  BRA    20C4
.................... 
....................                            else if (ValorPot <= 56)                  //Compara el valor de el ADC con 56
205E:  MOVF   04,W
2060:  SUBLW  38
2062:  BNC   206C
.................... 
....................                                 {
.................... 
....................                                     output_b (0b00000001);           // Leds activos
2064:  CLRF   F93
2066:  MOVLW  01
2068:  MOVWF  F8A
....................                                 }
206A:  BRA    20C4
.................... 
....................                             else if (ValorPot <= 84)                 //Compara el valor de el ADC con 84
206C:  MOVF   04,W
206E:  SUBLW  54
2070:  BNC   207A
.................... 
....................                                 {
.................... 
....................                                     output_b (0b00000011);           // Leds activos
2072:  CLRF   F93
2074:  MOVLW  03
2076:  MOVWF  F8A
.................... 
....................                                 }
2078:  BRA    20C4
.................... 
....................                            else if (ValorPot <= 112)                //Compara el valor de el ADC con 112
207A:  MOVF   04,W
207C:  SUBLW  70
207E:  BNC   2088
.................... 
....................                                 {
.................... 
....................                                       output_b (0b00000111);        // Leds activos
2080:  CLRF   F93
2082:  MOVLW  07
2084:  MOVWF  F8A
.................... 
....................                                 }
2086:  BRA    20C4
.................... 
....................                            else if (ValorPot <= 140)                //Compara el valor de el ADC con 140
2088:  MOVF   04,W
208A:  SUBLW  8C
208C:  BNC   2096
.................... 
....................                                 {
.................... 
....................                                       output_b (0b00001111);       // Leds activos
208E:  CLRF   F93
2090:  MOVLW  0F
2092:  MOVWF  F8A
.................... 
....................                                 }
2094:  BRA    20C4
.................... 
....................                             else if (ValorPot <= 168)              //Compara el valor de el ADC con 168
2096:  MOVF   04,W
2098:  SUBLW  A8
209A:  BNC   20A4
.................... 
....................                                  {
.................... 
....................                                         output_b (0b00011111);     // Leds activos
209C:  CLRF   F93
209E:  MOVLW  1F
20A0:  MOVWF  F8A
.................... 
....................                                  }
20A2:  BRA    20C4
.................... 
....................                              else if (ValorPot <= 196)             //Compara el valor de el ADC con 196
20A4:  MOVF   04,W
20A6:  SUBLW  C4
20A8:  BNC   20B2
.................... 
....................                                  {
.................... 
....................                                          output_b (0b00111111);    // Leds activos
20AA:  CLRF   F93
20AC:  MOVLW  3F
20AE:  MOVWF  F8A
.................... 
....................                                  }
20B0:  BRA    20C4
.................... 
....................                              else if (ValorPot <= 252)             //Compara el valor de el ADC con 252
20B2:  MOVF   04,W
20B4:  SUBLW  FC
20B6:  BNC   20C0
.................... 
....................                                  {
.................... 
....................                                        output_b (0b01111111);      // Leds activos
20B8:  CLRF   F93
20BA:  MOVLW  7F
20BC:  MOVWF  F8A
.................... 
....................                                  }
20BE:  BRA    20C4
.................... 
....................                              else if (ValorPot <= 255)             //Compara el valor de el ADC con 255
.................... 
....................                                    {
.................... 
....................                                         output_b (0b11111111);     // Leds activos
20C0:  CLRF   F93
20C2:  SETF   F8A
.................... 
....................                                     }
20C4:  BRA    203C
....................                }
.................... }
20C6:  SLEEP 

Configuration Fuses:
   Word  1: CC07   PLL12 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E26   PUT BROWNOUT VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
